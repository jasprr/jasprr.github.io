const easeInOut = (t) => Math.cos(t * Math.PI) / -2 + .5;
const easeIn = (t) => 1 - Math.cos(t * Math.PI * .5);

const lerp = (a, b, t) => a + (b - a) * t;
const warp = (tStart, tEnd, t, toZero = false) => {
	const tDuration = tEnd - tStart;
	const tWarped = (t - tStart) / tDuration;
	
	if (toZero && tWarped > 1) {
		return 0;
	}
	
	return Math.min(1, Math.max(0, tWarped));
};

class Box {
	constructor(color) {
		this.material = new THREE.MeshPhongMaterial({
			color: color,
			side: THREE.DoubleSide,
			transparent: true,
		});
		
		this.box = Box.createBoxMesh(this.material);
		this.lid = Box.createLidMesh(this.material);
		
		this.mesh = new THREE.Object3D();
		this.mesh.add(this.box);
		this.mesh.add(this.lid);
	}
	
	setAnimationProgress(t) {
		const tBoxScale = warp(0, .2, t);
		const tLid = warp(.2, .4, t);
		const tBoxPosition = warp(.6, 1, t);
		const tBoxFade = warp(.8, 1, t);
		
		this.lid.rotation.x = lerp(Math.PI * .5, 0, easeInOut(tLid));
		this.mesh.position.y = -easeIn(tBoxPosition) * 2;
		
		const boxScale = .75 + .25 * easeInOut(tBoxScale);
		this.mesh.scale.set(boxScale, boxScale, boxScale);
		
		this.material.opacity = 1 - easeIn(tBoxFade);
	}
	
	static createBoxMesh(material) {
		const geometry = new THREE.BoxGeometry(1, 1, 1, 1, 1, 1);
		
		geometry.faces.splice(4, 2);
		geometry.computeFaceNormals();
		
		const mesh = new THREE.Mesh(geometry, material);
		mesh.castShadow = true;
		mesh.receiveShadow = true;
		
		return mesh;
	}
	
	static createLidMesh(material) {
		const geometry = new THREE.PlaneGeometry(1, 1, 1, 1);
		const mesh = new THREE.Mesh(geometry, material);
		
		mesh.position.y = .5;
		mesh.castShadow = true;
		mesh.receiveShadow = true;
		
		const lidContainer = new THREE.Object3D();
		lidContainer.add(mesh);
		lidContainer.position.set(0, .5, -0.5);
		lidContainer.rotation.x = Math.PI / 2;
		
		return lidContainer;
	}
}

class Simulation {
	constructor() {
		this.camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 1, 1024);
		this.scene = new THREE.Scene();
		this.renderer = new THREE.WebGLRenderer({
			antialias: true,
			alpha: true,
		});
		
		this.renderer.setPixelRatio(window.devicePixelRatio);
		
		this.renderer.gammaInput = true;
		this.renderer.gammaOutput = true;
		this.renderer.physicallyCorrectLights = true;
		this.renderer.shadowMap.enabled = true;
		this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;
		
		this.camera.position.set(4, 4, 4);
		this.camera.lookAt(new THREE.Vector3());
		
		this.boxA = new Box(0x359bf3);
		this.scene.add(this.boxA.mesh);
		
		this.boxB = new Box(0x303030);
		this.boxB.mesh.rotation.y = Math.PI * .5;
		this.scene.add(this.boxB.mesh);
		
		this.scene.add(Simulation.LIGHT_AMBIENT);
		this.scene.add(Simulation.LIGHT_POINT);
		
		this.animationLoop = this.animate.bind(this);
	}
	
	setSize(width, height) {
		const cameraSize = Simulation.CAMERA_SIZE;
		const aspect = width / height;
		
		this.camera.left = -cameraSize * aspect;
		this.camera.right = cameraSize * aspect;
		this.camera.top = cameraSize;
		this.camera.bottom = -cameraSize;
		this.camera.updateProjectionMatrix();
		
		this.renderer.setSize(width, height);
		this.render();
	}
	
	animate() {
		requestAnimationFrame(this.animationLoop);
		
		this.update();
		this.render();
	}
	
	update() {
		const duration = 4;
		const now = Date.now() / 1000;
		const progress = (now % duration) / duration;
		
		this.boxA.setAnimationProgress(warp(0, .5, progress, true));
		this.boxB.setAnimationProgress(warp(.5, 1, progress, true));
	}
	
	render() {
		this.renderer.render(this.scene, this.camera);
	}
	
	static get LIGHT_AMBIENT() {
		return new THREE.AmbientLight(0xEEEEEEFF, .2);
	}
	
	static get LIGHT_POINT() {
		const light = new THREE.PointLight(0xFFFFFF, 1, 1024, .1);
		
		light.castShadow = true;
		light.position.set(1.5, 5, 4);
		light.power = 20;
		light.shadow.bias = 0.02;
		light.shadow.mapSize.set(1024, 1024);
		light.shadow.radius = 4;
		
		return light;
	}
	
	static get CAMERA_SIZE() {
		return 4;
	}
}

const sim = new Simulation;
let updateSizeAnimation;

const updateSize = () => {
	sim.setSize(window.innerWidth, window.innerHeight);
	sim.render();
	
	updateSizeAnimation = null;
};

const requestUpdateSize = () => {
	if (updateSizeAnimation) return;
	updateSizeAnimation = requestAnimationFrame(updateSize);
};

sim.animate();

document.body.appendChild(sim.renderer.domElement);

window.addEventListener('resize', requestUpdateSize);
updateSize();